package org.example.client.user;

import javax.swing.*;
import java.awt.*;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
public class UserChatWindow {
    private ChatService chatService;
    private UserService userService;
    private ChatLogService logService;
    private ChatLog chatLog;

    public UserChatWindow(ChatService chatService, UserService userService, ChatLogService logService, ChatLog chatLog) {
        this.chatService = chatService;
        this.userService = userService;
        this.logService = logService;
        this.chatLog = chatLog;
    }

    public void openUserWindow(User user) {
        JFrame frame = new JFrame("User Dashboard - " + user.getEmail());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new GridLayout(3, 1, 10, 10));

        JLabel welcomeLabel = new JLabel("Welcome, " + user.getEmail(), SwingConstants.CENTER);
        JButton chatButton = new JButton("Chat");
        JButton updateProfileButton = new JButton("Update Profile");

        // Chat button action
        chatButton.addActionListener(e -> {
            try {
                openChatWindow(user);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(frame, "Error opening chat window: " + ex.getMessage());
            }
        });

        // Update profile button action
        updateProfileButton.addActionListener(e -> {
            JOptionPane.showMessageDialog(frame, "Update Profile functionality coming soon.");
        });

        frame.add(welcomeLabel);
        frame.add(chatButton);
        frame.add(updateProfileButton);

        frame.setVisible(true);
    }

    public void openChatWindow(User user) throws Exception {
        JFrame frame = new JFrame("Chat - " + user.getEmail());
        JTextArea chatArea = new JTextArea(10, 30);
        chatArea.setEditable(false);
        JTextField inputField = new JTextField(20);
        JButton sendButton = new JButton("Send");

        ChatObserver observer = new ChatObserver() {
            public void notifyNewMessage(String message) throws RemoteException {
                SwingUtilities.invokeLater(() -> chatArea.append(message + "\n"));
            }
        };

        ChatObserver stub = (ChatObserver) UnicastRemoteObject.exportObject(observer, 0);
        chatLog = logService.login(user.getUser_id());
        chatService.subscribe(user, stub, chatLog);

        sendButton.addActionListener(ev -> {
            try {
                String msg = inputField.getText().trim();
                if (!msg.isEmpty()) {
                    if (logService.isUserOnline(user.getUser_id())) {
                        chatService.sendMessage(msg, user);
                    } else {
                        System.out.println("User session has ended. Cannot send message.");
                    }

                    if (msg.equalsIgnoreCase("Bye")) {
                        chatLog = logService.logout(user.getUser_id());
                        chatService.unsubscribe(user, stub, chatLog);
                    }

                    inputField.setText("");
                }
            } catch (RemoteException ex) {
                ex.printStackTrace();
            }
        });

        frame.setLayout(new BorderLayout());
        frame.add(new JScrollPane(chatArea), BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel();
        bottomPanel.add(inputField);
        bottomPanel.add(sendButton);
        frame.add(bottomPanel, BorderLayout.SOUTH);

        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                try {
                    chatLog = logService.logout(user.getUser_id());
                    if (chatLog != null) {
                        chatService.unsubscribe(user, stub, chatLog);
                        System.out.println("User logged out and unsubscribed.");
                    }
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }
        });

        frame.pack();
        frame.setVisible(true);
    }
}
